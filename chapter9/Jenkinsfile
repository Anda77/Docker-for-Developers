#!/usr/bin/env groovy
def appName = 'shipitclicker'
def dockerfile = 'chapter7/Dockerfile'
def registry = 'https://registry-1.docker.io/'
def appVersion = '0.5.0'
def getSemVer(appVersion, commitHash) {
      "${appVersion}+${env.BUILD_ID}.${commitHash}"
}
def getImageName(appName, semVer) {
  withCredentials([[$class: 'UsernamePasswordMultiBinding',
    credentialsId: 'shipit.dockerhub.id',
    usernameVariable: 'dh_user',
    passwordVariable: 'dh_password']]) {
      "${dh_user}/${appName}:${semVer}"
  }
}
def getTarget() {
  env.BRANCH_NAME == 'staging' ? 'staging' : 'prod'
}
def semVer
pipeline {
  agent any
  stages {
    stage('build') {
      steps {
        checkout scm
        script {
          shortCommit = sh(
            returnStdout: true, 
            script: "git log -n 1 --pretty=format:'%h'").trim()
          semVer = getSemVer(appVersion, shortCommit)
          def imageName
          docker.withRegistry(registry, 'shipit.dockerhub.id') {
            imageName = getImageName(appName, semVer)
            def image = docker.build(
              imageName,
              "-f ${dockerfile} --network host ./chapter9"
            )
            image.push()
          }
          writeFile "build.properties", text: """
semVer=${semVer}
imageName=${imageName}
"""
          }
      }
    }
    stage('archive') {
      steps {
        sh "tar cvfz helm.tar.gz shipitclicker"
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
          credentialsId: 'github',
          usernameVariable: 'githubUsername',
          passwordVariable: 'githubToken']]) {
            # TODO: archive Helm chart artifacts to:
            # GitHub Artifacts or S3 or elsewhere
          }
        archiveArtifacts("build.properties,helm.tar.gz")
      }
    }
  }
}
